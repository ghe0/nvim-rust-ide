vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

vim.opt.mouse = ""
vim.opt.number = true
vim.opt.laststatus = 2
vim.opt.wildmode = "longest,list"
vim.opt.splitbelow = true
vim.opt.splitright = true
vim.opt.shiftwidth = 2
vim.opt.expandtab = true
vim.opt.softtabstop = 2
vim.opt.foldmethod = "indent"
vim.opt.foldnestmax = 4
vim.opt.foldlevel = 10
vim.cmd [[
set foldtext=CustomFoldText()

function! CustomFoldText()
  let indentation = indent(v:foldstart - 1)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let foldLevelStr = "  +--"
  let expansionString = repeat(" ", indentation)

  return expansionString . foldLevelStr . foldSizeStr
endfunction
]]
vim.opt.termguicolors = true

vim.cmd [[autocmd BufWritePost * GitGutter]]
vim.cmd [[autocmd BufNewFile,BufRead *.fish set syntax=bash]]
vim.cmd [[highlight SignColumn ctermbg=none]]
vim.cmd [[highlight GitGutterAdd    ctermfg=12]]
vim.cmd [[highlight GitGutterChange ctermfg=13]]
vim.cmd [[highlight GitGutterDelete ctermfg=1]]
vim.cmd [[let g:gitgutter_set_sign_backgrounds = 1]]

vim.api.nvim_set_keymap( 'n', '<F2>', ':set invnu <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F3>', ':set mouse=a <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F4>', ':set mouse="" <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F5>', ':terminal % <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F5>', ':! cargo run --quiet <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F6>', ':w <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'i', '<F6>', '<ESC> :w <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F7>', ':NvimTreeToggle <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<F8>', ':NvimTreeFindFile <CR>', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<UP>', 'gk', {noremap = true})
vim.api.nvim_set_keymap( 'n', '<DOWN>', 'gj', {noremap = true})

require('plugins')

filename = vim.api.nvim_buf_get_name(0)
is_go_file = filename:sub(-3) == ".go"
nvim_theme = 'melange'
lualine_theme = 'gruvbox_dark'
if (is_go_file)
then
  nvim_theme = 'tender'
  lualine_theme = 'modus-vivendi'
end

vim.cmd("colorscheme " .. nvim_theme)
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = lualine_theme,
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {
      'branch',
      {
        'diff',
        symbols = { added = ' ', modified = '柳', removed = ' ' },
        diff_color = {
          added = { fg = '#33DD33' },
          modified = { fg = '#AAAAFF' },
          removed = { fg = '#FF7755' },
        },
      },
      {
        'diagnostics',
        symbols = { error = ' ', warn = ' ', info = ' ', hint = '★ ' },
        diagnostics_color = {
          error = { fg = '#FF4343' },
          warn = { fg = '#ECBE7B' },
          info = { fg = '#008080' },
        },
      }
    },
    lualine_c = {'filename' },
    lualine_x = { { 'filetype', colored = true } },
    lualine_y = { 'progress' },
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {
    lualine_a = { { 'buffers',
      hide_filename_extension = true,
      mode = 4,
      symbols = {
        modified = ' ●',      -- Text to show when the buffer is modified
        alternate_file = '', -- Text to show to identify the alternate file
        directory =  '',     -- Text to show when the buffer is a directory
      },
    } },
    lualine_b = {},
    lualine_x = {{ 'filename', path = 1 }},
    lualine_y = {},
    lualine_z = {}
  },
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}

local cmp = require'cmp'
local lspkind = require('lspkind')
cmp.setup({
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    -- Add tab support
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Insert,
      select = true,
    })
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'path' },
    { name = 'buffer' },
  },
  formatting = {
    fields = { "kind", "abbr" },
    format = lspkind.cmp_format({
      mode = "symbol",
    }),
  },
})

local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.format { async = true }<CR>', opts)
end

local lspconfig = require'lspconfig'
lspconfig.rust_analyzer.setup {
  on_attach = on_attach,
  settings = {
    ["rust-analyzer"] = {
      rustfmt = {
        extraArgs = { "+nightly", },
      },
    }
  }
}
lspconfig.move_analyzer.setup{
  on_attach = on_attach
}
lspconfig.gopls.setup{
  on_attach = on_attach
}

require("nvim-tree").setup({
  diagnostics = {
    enable = true,
    show_on_dirs = true,
    icons = { error = ' ', warning = ' ', info = ' ', hint = '★ ' }
  },
  sort_by = "case_sensitive",
  view = {
    hide_root_folder = true,
    adaptive_size = true,
  },
  renderer = {
    group_empty = true,
    special_files = { "main.rs", "index.html", "src" },
    icons = {
      git_placement = "after",
    }
  },
})

require"fidget".setup{}
